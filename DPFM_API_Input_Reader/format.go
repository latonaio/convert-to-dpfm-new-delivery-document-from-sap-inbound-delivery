package dpfm_api_input_reader

import (
	"convert-to-dpfm-delivery-document-from-sap-inbound-delivery/DPFM_API_Caller/requests"
)

func (sdc *SDC) ConvertToHeader() *requests.SAPInboundDeliveryHeader {
	data := sdc.SAPInboundDeliveryHeader
	return &requests.SAPInboundDeliveryHeader{
		ReceivingLocationTimeZone:     data.ReceivingLocationTimeZone,
		ActualDeliveryRoute:           data.ActualDeliveryRoute,
		ActualGoodsMovementDate:       data.ActualGoodsMovementDate,
		ActualGoodsMovementTime:       data.ActualGoodsMovementTime,
		BillingDocumentDate:           data.BillingDocumentDate,
		CompleteDeliveryIsDefined:     data.CompleteDeliveryIsDefined,
		ConfirmationTime:              data.ConfirmationTime,
		CreationDate:                  data.CreationDate,
		CreationTime:                  data.CreationTime,
		CustomerGroup:                 data.CustomerGroup,
		DeliveryBlockReason:           data.DeliveryBlockReason,
		DeliveryDate:                  data.DeliveryDate,
		DeliveryDocument:              data.DeliveryDocument,
		DeliveryDocumentBySupplier:    data.DeliveryDocumentBySupplier,
		DeliveryDocumentType:          data.DeliveryDocumentType,
		DeliveryIsInPlant:             data.DeliveryIsInPlant,
		DeliveryPriority:              data.DeliveryPriority,
		DeliveryTime:                  data.DeliveryTime,
		DocumentDate:                  data.DocumentDate,
		GoodsIssueOrReceiptSlipNumber: data.GoodsIssueOrReceiptSlipNumber,
		GoodsIssueTime:                data.GoodsIssueTime,
		HeaderBillgIncompletionStatus: data.HeaderBillgIncompletionStatus,
		HeaderBillingBlockReason:      data.HeaderBillingBlockReason,
		HeaderDelivIncompletionStatus: data.HeaderDelivIncompletionStatus,
		HeaderGrossWeight:             data.HeaderGrossWeight,
		HeaderNetWeight:               data.HeaderNetWeight,
		HeaderPackingIncompletionSts:  data.HeaderPackingIncompletionSts,
		HeaderPickgIncompletionStatus: data.HeaderPickgIncompletionStatus,
		HeaderVolume:                  data.HeaderVolume,
		HeaderVolumeUnit:              data.HeaderVolumeUnit,
		HeaderWeightUnit:              data.HeaderWeightUnit,
		IncotermsClassification:       data.IncotermsClassification,
		IsExportDelivery:              data.IsExportDelivery,
		LastChangeDate:                data.LastChangeDate,
		LoadingDate:                   data.LoadingDate,
		LoadingPoint:                  data.LoadingPoint,
		LoadingTime:                   data.LoadingTime,
		MeansOfTransport:              data.MeansOfTransport,
		OrderCombinationIsAllowed:     data.OrderCombinationIsAllowed,
		OrderID:                       data.OrderID,
		PickedItemsLocation:           data.PickedItemsLocation,
		PickingDate:                   data.PickingDate,
		PickingTime:                   data.PickingTime,
		PlannedGoodsIssueDate:         data.PlannedGoodsIssueDate,
		ProposedDeliveryRoute:         data.ProposedDeliveryRoute,
		ReceivingPlant:                data.ReceivingPlant,
		RouteSchedule:                 data.RouteSchedule,
		SalesDistrict:                 data.SalesDistrict,
		SalesOffice:                   data.SalesOffice,
		SalesOrganization:             data.SalesOrganization,
		SDDocumentCategory:            data.SDDocumentCategory,
		ShipmentBlockReason:           data.ShipmentBlockReason,
		ShippingCondition:             data.ShippingCondition,
		ShippingPoint:                 data.ShippingPoint,
		ShippingType:                  data.ShippingType,
		ShipToParty:                   data.ShipToParty,
		SoldToParty:                   data.SoldToParty,
		Supplier:                      data.Supplier,
		TotalBlockStatus:              data.TotalBlockStatus,
		TotalCreditCheckStatus:        data.TotalCreditCheckStatus,
		TotalNumberOfPackage:          data.TotalNumberOfPackage,
		TransactionCurrency:           data.TransactionCurrency,
		TransportationGroup:           data.TransportationGroup,
		TransportationPlanningDate:    data.TransportationPlanningDate,
		TransportationPlanningStatus:  data.TransportationPlanningStatus,
		TransportationPlanningTime:    data.TransportationPlanningTime,
		UnloadingPointName:            data.UnloadingPointName,
	}
}

func (sdc *SDC) ConvertToItem(num int) *requests.SAPInboundDeliveryItem {
	dataInboundDelivery := sdc.SAPInboundDeliveryHeader
	data := sdc.SAPInboundDeliveryHeader.SAPInboundDeliveryItem[num]

	return &requests.SAPInboundDeliveryItem{
		ActualDeliveredQtyInBaseUnit:   data.ActualDeliveredQtyInBaseUnit,
		ActualDeliveryQuantity:         data.ActualDeliveryQuantity,
		AdditionalCustomerGroup1:       data.AdditionalCustomerGroup1,
		AdditionalCustomerGroup2:       data.AdditionalCustomerGroup2,
		AdditionalCustomerGroup3:       data.AdditionalCustomerGroup3,
		AdditionalCustomerGroup4:       data.AdditionalCustomerGroup4,
		AdditionalCustomerGroup5:       data.AdditionalCustomerGroup5,
		BaseUnit:                       data.BaseUnit,
		Batch:                          data.Batch,
		BatchBySupplier:                data.BatchBySupplier,
		BOMExplosion:                   data.BOMExplosion,
		BusinessArea:                   data.BusinessArea,
		ControllingArea:                data.ControllingArea,
		CostCenter:                     data.CostCenter,
		CreationDate:                   data.CreationDate,
		CreationTime:                   data.CreationTime,
		DeliveryDocument:               dataInboundDelivery.DeliveryDocument,
		DeliveryDocumentItem:           data.DeliveryDocumentItem,
		DeliveryDocumentItemCategory:   data.DeliveryDocumentItemCategory,
		DeliveryDocumentItemText:       data.DeliveryDocumentItemText,
		DeliveryGroup:                  data.DeliveryGroup,
		DeliveryQuantityUnit:           data.DeliveryQuantityUnit,
		DeliveryRelatedBillingStatus:   data.DeliveryRelatedBillingStatus,
		DistributionChannel:            data.DistributionChannel,
		Division:                       data.Division,
		GLAccount:                      data.GLAccount,
		GoodsMovementReasonCode:        data.GoodsMovementReasonCode,
		GoodsMovementStatus:            data.GoodsMovementStatus,
		GoodsMovementType:              data.GoodsMovementType,
		InternationalArticleNumber:     data.InternationalArticleNumber,
		InventorySpecialStockType:      data.InventorySpecialStockType,
		IsCompletelyDelivered:          data.IsCompletelyDelivered,
		IsNotGoodsMovementsRelevant:    data.IsNotGoodsMovementsRelevant,
		IssuingOrReceivingPlant:        data.IssuingOrReceivingPlant,
		IssuingOrReceivingStorageLoc:   data.IssuingOrReceivingStorageLoc,
		ItemBillingBlockReason:         data.ItemBillingBlockReason,
		ItemBillingIncompletionStatus:  data.ItemBillingIncompletionStatus,
		ItemDeliveryIncompletionStatus: data.ItemDeliveryIncompletionStatus,
		ItemGdsMvtIncompletionSts:      data.ItemGdsMvtIncompletionSts,
		ItemGeneralIncompletionStatus:  data.ItemGeneralIncompletionStatus,
		ItemGrossWeight:                data.ItemGrossWeight,
		ItemIsBillingRelevant:          data.ItemIsBillingRelevant,
		ItemNetWeight:                  data.ItemNetWeight,
		ItemPackingIncompletionStatus:  data.ItemPackingIncompletionStatus,
		ItemPickingIncompletionStatus:  data.ItemPickingIncompletionStatus,
		ItemVolume:                     data.ItemVolume,
		ItemVolumeUnit:                 data.ItemVolumeUnit,
		ItemWeightUnit:                 data.ItemWeightUnit,
		LastChangeDate:                 data.LastChangeDate,
		LoadingGroup:                   data.LoadingGroup,
		Material:                       data.Material,
		MaterialByCustomer:             data.MaterialByCustomer,
		MaterialFreightGroup:           data.MaterialFreightGroup,
		MaterialGroup:                  data.MaterialGroup,
		MaterialIsBatchManaged:         data.MaterialIsBatchManaged,
		OrderID:                        data.OrderID,
		OrderItem:                      data.OrderItem,
		OriginalDeliveryQuantity:       data.OriginalDeliveryQuantity,
		PackingStatus:                  data.PackingStatus,
		PartialDeliveryIsAllowed:       data.PartialDeliveryIsAllowed,
		PickingConfirmationStatus:      data.PickingConfirmationStatus,
		PickingStatus:                  data.PickingStatus,
		Plant:                          data.Plant,
		ProductAvailabilityDate:        data.ProductAvailabilityDate,
		ProductAvailabilityTime:        data.ProductAvailabilityTime,
		ProfitabilitySegment:           data.ProfitabilitySegment,
		ProfitCenter:                   data.ProfitCenter,
		QuantityIsFixed:                data.QuantityIsFixed,
		ReceivingPoint:                 data.ReceivingPoint,
		ReferenceSDDocument:            data.ReferenceSDDocument,
		ReferenceSDDocumentItem:        data.ReferenceSDDocumentItem,
		SalesDocumentItemType:          data.SalesDocumentItemType,
		SalesGroup:                     data.SalesGroup,
		SalesOffice:                    data.SalesOffice,
		SDDocumentCategory:             data.SDDocumentCategory,
		SDProcessStatus:                data.SDProcessStatus,
		ShelfLifeExpirationDate:        data.ShelfLifeExpirationDate,
		StockType:                      data.StockType,
		StorageLocation:                data.StorageLocation,
		TransportationGroup:            data.TransportationGroup,
		UnlimitedOverdeliveryIsAllowed: data.UnlimitedOverdeliveryIsAllowed,
	}
}

func (sdc *SDC) ConvertToHeaderPartner(num, hpNum int) *requests.SAPInboundDeliveryHeaderPartner {
	data := sdc.SAPInboundDeliveryHeader.SAPInboundDeliveryHeaderPartner[hpNum]

	return &requests.SAPInboundDeliveryHeaderPartner{
		AddressID:       data.AddressID,
		ContactPerson:   data.ContactPerson,
		Customer:        data.Customer,
		PartnerFunction: data.PartnerFunction,
		Personnel:       data.Personnel,
		SDDocument:      data.SDDocument,
		SDDocumentItem:  data.SDDocumentItem,
		Supplier:        data.Supplier,
	}
}

func (sdc *SDC) ConvertToPartnerAddress(hpNum, hppNum int) *requests.SAPInboundDeliveryPartnerAddress {
	dataInboundDelivery := sdc.SAPInboundDeliveryHeader
	dataHeaderPartner := dataInboundDelivery.SAPInboundDeliveryHeaderPartner[hpNum]
	data := dataHeaderPartner.SAPInboundDeliveryPartnerAddress[hppNum]
	return &requests.SAPInboundDeliveryPartnerAddress{
		AddressID:              data.AddressID,
		Building:               data.Building,
		BusinessPartnerName1:   data.BusinessPartnerName1,
		CityName:               data.CityName,
		CorrespondenceLanguage: data.CorrespondenceLanguage,
		Country:                data.Country,
		FaxNumber:              data.FaxNumber,
		Nation:                 data.Nation,
		PhoneNumber:            data.PhoneNumber,
		PostalCode:             data.PostalCode,
		Region:                 data.Region,
		StreetName:             data.StreetName,
	}
}
